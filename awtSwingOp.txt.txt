import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;

// Main Swing Application
public class MultiTaskApplication extends JFrame {
    // Components for Task 1: Calculator
    private JTextField num1Field, num2Field, resultField;
    private JButton addButton, subtractButton, multiplyButton, divideButton;

    // Components for Task 2: File Writing
    private JTextArea textArea;
    private JTextField fileNameField;
    private JButton saveButton;

    // Components for Task 3: Rectangle Drawing
    private JPanel drawingPanel;
    private int startX, startY, endX, endY;
    private boolean isDrawing = false;

    public MultiTaskApplication() {
        setTitle("Multi-Task Application");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(3, 1)); // Three sections for three tasks

        // Task 1: Calculator
        JPanel calculatorPanel = new JPanel(new FlowLayout());
        calculatorPanel.setBorder(BorderFactory.createTitledBorder("Calculator"));
        calculatorPanel.add(new JLabel("Num 1:"));
        num1Field = new JTextField(5);
        calculatorPanel.add(num1Field);
        calculatorPanel.add(new JLabel("Num 2:"));
        num2Field = new JTextField(5);
        calculatorPanel.add(num2Field);
        calculatorPanel.add(new JLabel("Result:"));
        resultField = new JTextField(5);
        resultField.setEditable(false);
        calculatorPanel.add(resultField);

        addButton = new JButton("+");
        subtractButton = new JButton("-");
        multiplyButton = new JButton("*");
        divideButton = new JButton("/");
        calculatorPanel.add(addButton);
        calculatorPanel.add(subtractButton);
        calculatorPanel.add(multiplyButton);
        calculatorPanel.add(divideButton);

        addButton.addActionListener(e -> calculate('+'));
        subtractButton.addActionListener(e -> calculate('-'));
        multiplyButton.addActionListener(e -> calculate('*'));
        divideButton.addActionListener(e -> calculate('/'));

        add(calculatorPanel);

        // Task 2: File Writing
        JPanel filePanel = new JPanel(new BorderLayout());
        filePanel.setBorder(BorderFactory.createTitledBorder("File Writer"));
        textArea = new JTextArea(5, 30);
        JScrollPane scrollPane = new JScrollPane(textArea);
        filePanel.add(scrollPane, BorderLayout.CENTER);

        JPanel fileControlPanel = new JPanel(new FlowLayout());
        fileControlPanel.add(new JLabel("File Name:"));
        fileNameField = new JTextField(15);
        fileControlPanel.add(fileNameField);
        saveButton = new JButton("Save");
        fileControlPanel.add(saveButton);
        saveButton.addActionListener(e -> writeToFile());

        filePanel.add(fileControlPanel, BorderLayout.SOUTH);
        add(filePanel);

        // Task 3: Rectangle Drawing
        drawingPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (isDrawing) {
                    int x = Math.min(startX, endX);
                    int y = Math.min(startY, endY);
                    int width = Math.abs(endX - startX);
                    int height = Math.abs(endY - startY);
                    g.drawRect(x, y, width, height);
                }
            }
        };
        drawingPanel.setBackground(Color.LIGHT_GRAY);
        drawingPanel.setBorder(BorderFactory.createTitledBorder("Draw Rectangle"));
        drawingPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                startX = e.getX();
                startY = e.getY();
            }
        });
        drawingPanel.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                endX = e.getX();
                endY = e.getY();
                isDrawing = true;
                drawingPanel.repaint();
            }
        });

        add(drawingPanel);

        // Final setup
        setSize(800, 600);
        setVisible(true);
    }

    // Task 1: Calculator Logic
    private void calculate(char operation) {
        try {
            double num1 = Double.parseDouble(num1Field.getText());
            double num2 = Double.parseDouble(num2Field.getText());
            double result = 0;

            switch (operation) {
                case '+':
                    result = num1 + num2;
                    break;
                case '-':
                    result = num1 - num2;
                    break;
                case '*':
                    result = num1 * num2;
                    break;
                case '/':
                    if (num2 != 0) {
                        result = num1 / num2;
                    } else {
                        JOptionPane.showMessageDialog(this, "Cannot divide by zero", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    break;
            }
            resultField.setText(String.valueOf(result));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Task 2: File Writing Logic
    private void writeToFile() {
        String fileName = fileNameField.getText().trim();
        if (fileName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "File name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (FileWriter writer = new FileWriter(fileName)) {
            writer.write(textArea.getText());
            JOptionPane.showMessageDialog(this, "File saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MultiTaskApplication::new);
    }
}